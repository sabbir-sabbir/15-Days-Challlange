Basic Interview Questions Of React : ...
answer 1 ---
React is a JavaScript library developed by Facebook for building user interfaces, especially single-page applications. It lets developers create reusable UI components that update dynamically as data changes.

Why React is Used:
Component-Based: React breaks the UI into small, reusable pieces (components), making code more organized and manageable.
Fast Rendering: React uses a "virtual DOM" to efficiently update only parts of the page that need changes, making it fast.
Unidirectional Data Flow: Data flows one way, making it easier to understand and debug complex applications.



answer 2---
JSX (JavaScript XML) is a syntax extension for JavaScript that lets you write HTML-like code within JavaScript. It’s commonly used in React to describe what the UI should look like.

Why JSX is Preferred in React:
Readability: JSX makes the code easier to read and write by combining HTML-like syntax directly with JavaScript logic.
Component Structure: JSX closely resembles the structure of the UI, making it easier to visualize and manage components.
JSX Compilation: Under the hood, JSX is compiled to JavaScript, making it fast and optimized for React.



answer 3---
Key Differences:
JavaScript Expressions: In JSX, you can embed JavaScript expressions inside {} brackets (e.g., {2 + 2}).
Attributes: JSX uses camelCase for attributes instead of HTML's lowercase (e.g., className instead of class, onClick instead of onclick).
Self-Closing Tags: All tags must be closed, even single elements (e.g., <img />, <br />).
JavaScript Logic: JSX is not HTML but compiles to JavaScript, so you can include conditionals and loops directly within JSX.



answer 4---
Components are the building blocks of a React application. Each component is a self-contained piece of UI that represents part of the web page, like a button, form, or header.

Key Points:
Reusable: Components can be reused across the app, making code more modular.
Independent: Each component handles its own structure, logic, and styling.
Types: Components can be functional (simple functions) or class-based (use ES6 classes).



answer 5---
Functional components and class components are two ways to define components in React, each with different syntax and features.

Functional Components:
Simple functions that take props as an argument and return JSX.
Use React Hooks (like useState, useEffect) to manage state and lifecycle.
Preferred for simplicity and readability.

function Greeting(props) {
  return <h1>Hello, {props.name}!</h1>;
}

Class Components:
ES6 classes that extend React.Component.
Manage state and lifecycle methods (like componentDidMount) within the class.
Were commonly used before hooks but are now less popular.

class Greeting extends React.Component {
  render() {
    return <h1>Hello, {this.props.name}!</h1>;
  }
}



answer 6---
A Single-Page Application (SPA) is a web app that loads a single HTML page and dynamically updates content without reloading the whole page. This makes SPAs faster and smoother, providing a more app-like experience.

How React Enables SPAs:
Virtual DOM: React uses the virtual DOM to update only parts of the page that need changes, improving performance.
Component-Based Structure: React organizes the UI into components, making it easy to load and update specific sections.
React Router: React Router enables navigation between "pages" (components) without reloading, giving the appearance of multiple pages within a single page.



answer 7---
Props (short for "properties") are inputs that allow data to be passed from a parent component to a child component in React. They make components more dynamic by allowing you to customize their content.

Key Points:
Read-Only: Props are immutable, meaning they cannot be changed by the child component.
Passed from Parent to Child: Data flows from parent to child, enabling a one-way data flow.
Used to Render Dynamic Data: Props make components reusable by allowing different data to be displayed.

function Greeting(props) {
  return <h1>Hello, {props.name}!</h1>;
}

// Usage in Parent Component
<Greeting name="Alice" />




answer 8---
Key Differences:
Ownership:

State is managed within a component itself, allowing it to change over time.
Props are passed from a parent component to a child and cannot be changed by the child.
Mutability:

State is mutable and can be updated with setState (in class components) or useState (in functional components).
Props are read-only and cannot be modified by the receiving component.
Usage:

State is for data that changes within a component, like user input or UI behavior.
Props are for passing static or parent-defined data to children components.


answer 9---
Common Methods:
Parent to Child:

Pass data from a parent component to a child component through props.

function Parent() {
  const message = "Hello from Parent!";
  return <Child text={message} />;
}

function Child(props) {
  return <p>{props.text}</p>;
}

Child to Parent:

Pass data up by using a callback function provided by the parent.

function Parent() {
  const handleData = (data) => {
    console.log("Data from child:", data);
  };
  return <Child sendData={handleData} />;
}

function Child(props) {
  return <button onClick={() => props.sendData("Hello Parent!")}>Send Data</button>;
}




answer 10---
Key Prop in Lists
The key prop in React is crucial for efficiently rendering lists. Each item in a list needs a unique key to help React identify which items have changed, been added, or removed. This allows React to optimize rendering and minimize unnecessary updates.

const items = ["Apple", "Banana", "Orange"];

function ItemList() {
  return (
    <ul>
      {items.map((item, index) => (
        <li key={index}>{item}</li>
      ))}
    </ul>
  );
}



answer 11---

In React, handling events is similar to handling events in regular JavaScript, but with some syntax differences.

Basic Steps:
Attach Event Handler:

Add an event attribute (e.g., onClick, onChange) to an element, assigning it a function.
Event names are camelCase in React (e.g., onClick instead of onclick).
Define Event Handler Function:

The function can be defined in the component to handle the event action.
Pass Event Object (if needed):

Event handlers automatically receive the event object as a parameter.

function Button() {
  function handleClick() {
    alert("Button clicked!");
  }

  return <button onClick={handleClick}>Click Me</button>;
}




answer 12---
Controlled Components:
State-Driven: The input’s value is controlled by React state.
Two-Way Binding: The input’s value updates through a value prop and an onChange handler.

function Form() {
  const [name, setName] = React.useState("");

  return (
    <input 
      type="text" 
      value={name} 
      onChange={(e) => setName(e.target.value)} 
    />
  );
}


Uncontrolled Components:
DOM-Driven: The input’s value is managed by the DOM, not React.
Ref Access: You access the value directly using a ref.

function Form() {
  const inputRef = React.useRef();

  const handleSubmit = () => {
    alert(inputRef.current.value);
  };

  return (
    <div>
      <input type="text" ref={inputRef} />
      <button onClick={handleSubmit}>Submit</button>
    </div>
  );
}




answer 13---
A React Fragment is a wrapper component that lets you group multiple elements without adding extra nodes to the DOM, which helps keep your HTML structure cleaner.

Why Use React Fragments:
Avoids Extra Markup: Fragments prevent the need to add unnecessary divs or other elements just for grouping.
Improves Performance: Fewer DOM nodes mean a lighter and faster-rendering component.
Syntax: You can use <React.Fragment>...</React.Fragment> or simply <>...</> for shorthand.
function List() {
  return (
    <>
      <h1>Title</h1>
      <p>This is a paragraph.</p>
    </>
  );
}




answer 14---
In React, you can conditionally render elements using JavaScript logic inside JSX. Here are some common ways to do it:

1. Using Ternary Operator:
function Welcome(props) {
  return (
    <div>
      {props.isLoggedIn ? <h1>Welcome back!</h1> : <h1>Please log in</h1>}
    </div>
  );
}


2. Using if Statement:
You can use a regular if statement before returning JSX.
function Greeting(props) {
  let message;
  if (props.isLoggedIn) {
    message = <h1>Welcome back!</h1>;
  } else {
    message = <h1>Please log in</h1>;
  }
  return <div>{message}</div>;
}




answer 15---
React Hooks are functions that allow you to use React features, like state and lifecycle methods, in functional components. Before hooks, these features were only available in class components.

Commonly Used React Hooks:
useState:
Used to add state to functional components.
const [count, setCount] = useState(0);






Intermediate Interview Questions Of React:.....................
answer 1---
Key Points:
Initial State: You provide an initial value to useState (e.g., 0, "", or an object).
State and Setter: useState returns two values:
The current state value.
A setter function to update the state.

const [state, setState] = useState(initialValue);

import React, { useState } from "react";

function Counter() {
  // Initial state is 0
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increase</button>
    </div>
  );
}




answer 2---
The useEffect hook in React allows you to perform side effects, like fetching data, updating the DOM, or setting up subscriptions, in functional components.

Key Points:
Runs after render: useEffect runs after the component renders.
Dependencies: You can control when useEffect runs using the dependency array:
Empty Array ([]): Runs only once, when the component mounts.
With Values: Runs when the specified values change.
Without Array: Runs after every render. 

useEffect(() => {
  console.log("Component mounted or updated");

  return () => {
    console.log("Cleanup when component unmounts or updates");
  };
}, []);  // Empty array means it runs only once when the component mounts.

Explanation: useEffect runs the function when the component mounts, and the return function cleans up when the component unmounts or before the effect runs again.



answer 3---
Using fetch() (Built-in Browser API):
import React, { useState, useEffect } from "react";

function App() {
  const [data, setData] = useState(null);

  useEffect(() => {
    // Make the API call when the component mounts
    fetch("https://api.example.com/data")
      .then(response => response.json())  // Convert response to JSON
      .then(data => setData(data))        // Set the data in state
      .catch(error => console.error("Error fetching data:", error));
  }, []);  // Empty array means this runs once when the component mounts

  return (
    <div>
      <h1>Data from API:</h1>
      {data ? (
        <pre>{JSON.stringify(data, null, 2)}</pre>
      ) : (
        <p>Loading...</p>
      )}
    </div>
  );
}



answer 4---
A Higher-Order Component (HOC) is a function in React that takes a component as an argument and returns a new component with enhanced functionality. HOCs are used to reuse logic across multiple components.

How HOCs Work:
Input: A component.
Output: A new component with additional props, behaviors, or lifecycle methods.
Purpose: Useful for adding shared features like logging, authentication, or data fetching.


import React from "react";

// HOC that adds loading functionality
function withLoading(Component) {
  return function EnhancedComponent({ isLoading, ...props }) {
    if (isLoading) return <p>Loading...</p>;
    return <Component {...props} />;
  };
}

// Original Component
function DataDisplay({ data }) {
  return <div>Data: {data}</div>;
}

// Enhanced Component with loading
const DataDisplayWithLoading = withLoading(DataDisplay);

// Usage
function App() {
  return <DataDisplayWithLoading isLoading={true} data="Some data" />;
}




answer 5---
The React Context API allows you to share data across multiple components without passing props down manually at every level. It’s useful for managing global data like user info, theme, or language settings.

How React Context Works:
Create Context: Use React.createContext() to create a context.
Provide Context: Wrap your component tree in a <Context.Provider> and pass the value you want to share.
Consume Context: Use useContext() or <Context.Consumer> to access the context value in any nested component.

import React, { createContext, useContext } from "react";

// Create a Context
const ThemeContext = createContext("light");

function App() {
  return (
    // Provide the theme value to the component tree
    <ThemeContext.Provider value="dark">
      <Toolbar />
    </ThemeContext.Provider>
  );
}

function Toolbar() {
  return <ThemedButton />;
}

function ThemedButton() {
  // Consume the theme value
  const theme = useContext(ThemeContext);
  return <button style={{ background: theme === "dark" ? "#333" : "#FFF" }}>Theme: {theme}</button>;
}




answer 6---
he Context API and prop drilling are both ways to share data among components, but they work differently and are used in different situations.

Key Differences:
Direct Access vs. Passing Through Props:

Context API: Provides data directly to any component that needs it, regardless of the component hierarchy. You don’t have to pass data manually through each level.
Prop Drilling: Data is passed through props from parent to child components, sometimes through many nested components, even if intermediate components don’t use it.
Cleaner Code:

Context API: Simplifies code by eliminating the need for “middleman” components to pass down props.
Prop Drilling: Leads to more complex code if the data has to pass through multiple levels, as each component must accept and forward the props.
Use Cases:

Context API: Ideal for global data that many components need, like themes, user info, or language settings.
Prop Drilling: Works best when the data only needs to pass through a few layers or when only a couple of components need it.
Example Comparison:
Suppose you have a User object that needs to be accessed by deeply nested components.

With Prop Drilling: Each component in the hierarchy would need to receive and pass down the User object as a prop, even if it doesn’t use it.

With Context API: You wrap the top-level component in a UserContext.Provider, and any component can directly access User via useContext(UserContext), regardless of its nesting level.



answer 7---
Refs in React are used to access and interact with DOM elements or React elements directly, bypassing the usual React data flow.

Key Points About Refs:
Access DOM Elements: Refs allow you to directly access and manipulate a DOM element (e.g., focus an input, trigger animations, or measure an element’s size).
Persist Values: Refs can store mutable values that don’t cause re-renders when updated, like keeping track of a previous state or tracking a timer ID.
Use with useRef or React.createRef:
In functional components: Use the useRef hook.
In class components: Use React.createRef.

import React, { useRef, useEffect } from "react";

function MyComponent() {
  const inputRef = useRef(null);

  useEffect(() => {
    // Automatically focus the input field when the component mounts
    inputRef.current.focus();
  }, []);

  return <input ref={inputRef} placeholder="Type here..." />;
}



answer 8---
Key Differences
Usage in Functional vs. Class Components:

useRef: Designed for functional components. It maintains the same reference object across re-renders.
createRef: Designed for class components. It creates a new reference object each time the component re-renders, making it less suitable for managing persistent data in function components.
Persistent Reference:

useRef: The same ref object persists across re-renders, which means it can hold onto values or DOM references without resetting on each render.
createRef: Every re-render generates a new ref object, so values stored in it don’t persist across renders.
Usage for Storing Mutable Data:

useRef: Often used to store any mutable value (like timers, counters, or previous state) that needs to stay consistent between renders but doesn’t trigger a re-render when updated.
createRef: Primarily used to create refs in class components and generally focuses on accessing DOM elements.



answer 9---
React.memo is a higher-order component in React that optimizes functional components by preventing unnecessary re-renders. It does this by memorizing the component’s output and only re-rendering if its props change.

Key Points About React.memo:
Performance Optimization: It’s especially useful for improving performance in large apps where re-rendering can be expensive.
Shallow Comparison: React.memo does a shallow comparison of props to determine if the component needs to update. If the props are the same as before, React skips re-rendering that component.
When to Use React.memo:
Use React.memo when:
The component renders frequently with the same props.
Re-rendering the component is costly or impacts performance.
Note: React.memo is most beneficial for pure components, where the output only depends on the props and doesn’t rely on any external data or state.


import React from "react";

const Greeting = React.memo(function Greeting({ name }) {
  console.log("Rendering Greeting");
  return <h1>Hello, {name}!</h1>;
});

function App() {
  const [count, setCount] = React.useState(0);

  return (
    <div>
      <Greeting name="Alice" /> {/* Will not re-render unless `name` changes */}
      <button onClick={() => setCount(count + 1)}>Increase Count</button>
      <p>Count: {count}</p>
    </div>
  );
}

export default App;



answer 10---
React lifecycle methods are special methods that are automatically called at specific points in a React component's lifecycle. They allow you to control and respond to mounting, updating, and unmounting events in a component's life. These lifecycle methods are mostly used in class components, while functional components use React Hooks (useEffect) to achieve similar behavior.



answer 11---







